<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AugmentWebviewStateStore">
    <option name="stateMap">
      <map>
        <entry key="CHAT_STATE" value="{&quot;currentConversationId&quot;:&quot;d18f567b-f884-46b2-91ef-7748b9226538&quot;,&quot;conversations&quot;:{&quot;d18f567b-f884-46b2-91ef-7748b9226538&quot;:{&quot;id&quot;:&quot;d18f567b-f884-46b2-91ef-7748b9226538&quot;,&quot;createdAtIso&quot;:&quot;2025-07-29T11:10:46.551Z&quot;,&quot;lastInteractedAtIso&quot;:&quot;2025-07-29T12:12:06.098Z&quot;,&quot;chatHistory&quot;:[{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;0a76b293-d1b1-4363-b794-c39f7386a897&quot;,&quot;request_message&quot;:&quot;Hello&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Hello&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:0,&quot;content&quot;:&quot;Hello! I can see you have the `Mmmmm.java` file open in `src/main/java/com/belvinard/gestionstock/dto/`. It's currently an empty class in your stock management application.\n\nHow can I help you with your code today?\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;Hello&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;D:/project48/gestionstock&quot;,&quot;folderRoot&quot;:&quot;D:/project48/gestionstock&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-07-29T11:11:50.628Z&quot;,&quot;response_text&quot;:&quot;Hello! I can see you have the `Mmmmm.java` file open in `src/main/java/com/belvinard/gestionstock/dto/`. It's currently an empty class in your stock management application.\n\nHow can I help you with your code today?\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;191dcd63-f6db-4da6-a12b-9d13a3da0a0e&quot;,&quot;request_message&quot;:&quot;Helps me to create controller of all methods in com/belvinard/gestionstock/service/impl/VenteServiceImpl.java in src/main/java/com/belvinard/gestionstock/controller/VenteController.java&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Helps me to create controller of all methods in com/belvinard/gestionstock/service/impl/VenteServiceImpl.java in src/main/java/com/belvinard/gestionstock/controller/VenteController.java&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:0,&quot;content&quot;:&quot;I need to see the `VenteServiceImpl.java` file to understand what methods need to be exposed in the controller. My search failed to locate the service implementation file.\n\nCould you please share the `VenteServiceImpl.java` file using the \&quot;@\&quot; syntax (e.g., `@src/main/java/com/belvinard/gestionstock/service/impl/VenteServiceImpl.java`) so I can create the appropriate controller methods?\n\nAlternatively, you can tell me what methods are available in the service, and I'll help you create the REST endpoints for them.\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;Helps me to create controller of all methods in com/belvinard/gestionstock/service/impl/VenteServiceImpl.java in src/main/java/com/belvinard/gestionstock/controller/VenteController.java&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;D:/project48/gestionstock&quot;,&quot;folderRoot&quot;:&quot;D:/project48/gestionstock&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-07-29T11:37:14.893Z&quot;,&quot;response_text&quot;:&quot;I need to see the `VenteServiceImpl.java` file to understand what methods need to be exposed in the controller. My search failed to locate the service implementation file.\n\nCould you please share the `VenteServiceImpl.java` file using the \&quot;@\&quot; syntax (e.g., `@src/main/java/com/belvinard/gestionstock/service/impl/VenteServiceImpl.java`) so I can create the appropriate controller methods?\n\nAlternatively, you can tell me what methods are available in the service, and I'll help you create the REST endpoints for them.\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;5f1dc050-1ae7-4da6-9460-cbabf39992e8&quot;,&quot;request_message&quot;:&quot;here's @src/main/java/com/belvinard/gestionstock/service/impl/VenteServiceImpl.java\n@Service\r\n@RequiredArgsConstructor\r\npublic class VenteServiceImpl implements VenteService {\r\n\r\n    private final VenteRepository venteRepository;\r\n    private final LigneVenteRepository ligneVenteRepository;\r\n    private final ArticleRepository articleRepository;\r\n    private final EntrepriseRepository entrepriseRepository;\r\n    private final ModelMapper modelMapper;\r\n\r\n    @Override\r\n    @Transactional\r\n    public VenteDTO save(VenteDTO dto) {\r\n        // Validate entreprise\r\n        Entreprise entreprise = entrepriseRepository.findById(dto.getIdEntreprise())\r\n                .orElseThrow(() -&gt; new ResourceNotFoundException(\&quot;Entreprise\&quot;, \&quot;id\&quot;, dto.getIdEntreprise()));\r\n\r\n        // Create Vente entity\r\n        Vente vente = modelMapper.map(dto, Vente.class);\r\n        vente.setEntreprise(entreprise);\r\n        vente.setEtatVente(EtatVente.EN_COURS);\r\n        Vente saved = venteRepository.save(vente);\r\n        return modelMapper.map(saved, VenteDTO.class);\r\n    }\r\n\r\n    @Override\r\n    public VenteDTO findById(Long id) {\r\n        Vente vente = venteRepository.findById(id)\r\n                .orElseThrow(() -&gt; new ResourceNotFoundException(\&quot;Vente\&quot;, \&quot;id\&quot;, id));\r\n        return modelMapper.map(vente, VenteDTO.class);\r\n    }\r\n\r\n    @Override\r\n    public VenteDTO findByCode(String code) {\r\n        Vente vente = venteRepository.findByCode(code)\r\n                .orElseThrow(() -&gt; new ResourceNotFoundException(\&quot;Vente\&quot;, \&quot;code\&quot;, code));\r\n        return modelMapper.map(vente, VenteDTO.class);\r\n    }\r\n\r\n    @Override\r\n    public List&lt;VenteDTO&gt; findAll() {\r\n        return venteRepository.findAll().stream()\r\n                .map(vente -&gt; modelMapper.map(vente, VenteDTO.class))\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public void delete(Long id) {\r\n        Vente vente = venteRepository.findById(id)\r\n                .orElseThrow(() -&gt; new ResourceNotFoundException(\&quot;Vente\&quot;, \&quot;id\&quot;, id));\r\n        if (vente.getEtatVente() == EtatVente.FINALISEE) {\r\n            throw new InvalidOperationException(\&quot;Impossible de supprimer une vente finalisée\&quot;);\r\n        }\r\n        // Delete all line items first\r\n        ligneVenteRepository.deleteAllByVenteId(id);\r\n        venteRepository.delete(vente);\r\n    }\r\n\r\n    // --- Business Operations ---\r\n\r\n    @Transactional\r\n    @Override\r\n    public VenteDTO createVente(Long entrepriseId, VenteDTO venteDTO) {\r\n        venteDTO.setIdEntreprise(entrepriseId);\r\n        return save(venteDTO);\r\n    }\r\n\r\n\r\n    @Transactional\r\n    public VenteDTO updateEtatVente(Long idVente, EtatVente etatVente) {\r\n        Vente vente = venteRepository.findById(idVente)\r\n                .orElseThrow(() -&gt; new ResourceNotFoundException(\&quot;Vente\&quot;, \&quot;id\&quot;, idVente));\r\n        vente.setEtatVente(etatVente);\r\n        Vente updated = venteRepository.save(vente);\r\n        return modelMapper.map(updated, VenteDTO.class);\r\n    }\r\n\r\n    @Transactional\r\n    @Override\r\n    public VenteDTO finalizeVente(Long idVente) {\r\n        Vente vente = venteRepository.findById(idVente)\r\n                .orElseThrow(() -&gt; new ResourceNotFoundException(\&quot;Vente\&quot;, \&quot;id\&quot;, idVente));\r\n        if (vente.getEtatVente() == EtatVente.FINALISEE) {\r\n            throw new InvalidOperationException(\&quot;Vente déjà finalisée\&quot;);\r\n        }\r\n        List&lt;LigneVente&gt; lignes = ligneVenteRepository.findAllByVenteId(idVente);\r\n        if (lignes.isEmpty()) {\r\n            throw new InvalidOperationException(\&quot;Impossible de finaliser une vente sans lignes\&quot;);\r\n        }\r\n        vente.setEtatVente(EtatVente.FINALISEE);\r\n        venteRepository.save(vente);\r\n        // Update stock for each article\r\n        for (LigneVente ligne : lignes) {\r\n            Article article = ligne.getArticle();\r\n            if (article.getQuantiteEnStock() &lt; ligne.getQuantite().longValue()) {\r\n                throw new APIException(\&quot;Stock insuffisant pour l'article: \&quot; + article.getDesignation());\r\n            }\r\n            article.setQuantiteEnStock(article.getQuantiteEnStock() - ligne.getQuantite().longValue());\r\n            articleRepository.save(article);\r\n        }\r\n        return modelMapper.map(vente, VenteDTO.class);\r\n    }\r\n\r\n    // --- Search and Filter Operations ---\r\n\r\n    @Override\r\n    public List&lt;VenteDTO&gt; findAllByEntreprise(Long entrepriseId) {\r\n        return venteRepository.findAllByEntrepriseId(entrepriseId).stream()\r\n                .map(vente -&gt; modelMapper.map(vente, VenteDTO.class))\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    public List&lt;VenteDTO&gt; findByEtatVente(EtatVente etatVente) {\r\n        return venteRepository.findAllByEtatVente(etatVente).stream()\r\n                .map(vente -&gt; modelMapper.map(vente, VenteDTO.class))\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    public List&lt;VenteDTO&gt; findByEntrepriseAndEtatVente(Long entrepriseId, EtatVente etatVente) {\r\n        return venteRepository.findAllByEntrepriseIdAndEtatVente(entrepriseId, etatVente).stream()\r\n                .map(vente -&gt; modelMapper.map(vente, VenteDTO.class))\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    public List&lt;VenteDTO&gt; findByDateRange(LocalDateTime startDate, LocalDateTime endDate) {\r\n        return venteRepository.findAllByCreationDateBetween(startDate, endDate).stream()\r\n                .map(vente -&gt; modelMapper.map(vente, VenteDTO.class))\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    public List&lt;VenteDTO&gt; findByEntrepriseAndDateRange(Long entrepriseId, LocalDateTime startDate,\r\n                                                       LocalDateTime endDate) {\r\n        return venteRepository.findAllByEntrepriseIdAndCreationDateBetween(entrepriseId, startDate, endDate).stream()\r\n                .map(vente -&gt; modelMapper.map(vente, VenteDTO.class))\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    // --- Line Items Management ---\r\n\r\n    @Override\r\n    public List&lt;LigneVenteDTO&gt; findAllLignesVenteByVenteId(Long idVente) {\r\n        return ligneVenteRepository.findAllByVenteId(idVente).stream()\r\n                .map(ligne -&gt; modelMapper.map(ligne, LigneVenteDTO.class))\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Transactional\r\n    @Override\r\n    public LigneVenteDTO addLigneVente(Long venteId, LigneVenteDTO ligneVenteDTO) {\r\n        // Récupérer la vente\r\n        Vente vente = venteRepository.findById(venteId)\r\n                .orElseThrow(() -&gt; new ResourceNotFoundException(\&quot;Vente\&quot;, \&quot;id\&quot;, venteId));\r\n\r\n        // Vérifier que la vente n'est pas finalisée\r\n        if (vente.getEtatVente() == EtatVente.FINALISEE) {\r\n            throw new InvalidOperationException(\&quot;Impossible d'ajouter une ligne à une vente finalisée\&quot;);\r\n        }\r\n\r\n        // Récupérer l'article\r\n        Article article = articleRepository.findById(ligneVenteDTO.getIdArticle())\r\n                .orElseThrow(() -&gt; new ResourceNotFoundException(\&quot;Article\&quot;, \&quot;id\&quot;, ligneVenteDTO.getIdArticle()));\r\n\r\n        // Vérifier le stock\r\n        if (BigDecimal.valueOf(article.getQuantiteEnStock()).compareTo(ligneVenteDTO.getQuantite()) &lt; 0) {\r\n            throw new APIException(\&quot;Stock insuffisant pour l'article: \&quot; + article.getDesignation());\r\n        }\r\n\r\n        // Mapper DTO vers entité\r\n        LigneVente ligne = modelMapper.map(ligneVenteDTO, LigneVente.class);\r\n        ligne.setVente(vente);\r\n        ligne.setArticle(article);\r\n\r\n        // Enregistrer la ligne de vente\r\n        LigneVente saved = ligneVenteRepository.save(ligne);\r\n\r\n        // Retourner le résultat en DTO\r\n        return modelMapper.map(saved, LigneVenteDTO.class);\r\n    }\r\n Create all controllers methods using swagger annotation in @src/main/java/com/belvinard/gestionstock/controller/VenteController.java\n\r\n\r\n}\r\n&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;here's @src/main/java/com/belvinard/gestionstock/service/impl/VenteServiceImpl.java&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;@Service\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;@RequiredArgsConstructor\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;public class VenteServiceImpl implements VenteService {\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    private final VenteRepository venteRepository;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    private final LigneVenteRepository ligneVenteRepository;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    private final ArticleRepository articleRepository;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    private final EntrepriseRepository entrepriseRepository;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    private final ModelMapper modelMapper;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    @Override\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    @Transactional\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    public VenteDTO save(VenteDTO dto) {\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        // Validate entreprise\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        Entreprise entreprise = entrepriseRepository.findById(dto.getIdEntreprise())\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .orElseThrow(() -&gt; new ResourceNotFoundException(\&quot;Entreprise\&quot;, \&quot;id\&quot;, dto.getIdEntreprise()));\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        // Create Vente entity\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        Vente vente = modelMapper.map(dto, Vente.class);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        vente.setEntreprise(entreprise);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        vente.setEtatVente(EtatVente.EN_COURS);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        Vente saved = venteRepository.save(vente);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        return modelMapper.map(saved, VenteDTO.class);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    }\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    @Override\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    public VenteDTO findById(Long id) {\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        Vente vente = venteRepository.findById(id)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .orElseThrow(() -&gt; new ResourceNotFoundException(\&quot;Vente\&quot;, \&quot;id\&quot;, id));\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        return modelMapper.map(vente, VenteDTO.class);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    }\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    @Override\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    public VenteDTO findByCode(String code) {\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        Vente vente = venteRepository.findByCode(code)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .orElseThrow(() -&gt; new ResourceNotFoundException(\&quot;Vente\&quot;, \&quot;code\&quot;, code));\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        return modelMapper.map(vente, VenteDTO.class);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    }\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    @Override\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    public List&lt;VenteDTO&gt; findAll() {\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        return venteRepository.findAll().stream()\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .map(vente -&gt; modelMapper.map(vente, VenteDTO.class))\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .collect(Collectors.toList());\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    }\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    @Override\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    @Transactional\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    public void delete(Long id) {\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        Vente vente = venteRepository.findById(id)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .orElseThrow(() -&gt; new ResourceNotFoundException(\&quot;Vente\&quot;, \&quot;id\&quot;, id));\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        if (vente.getEtatVente() == EtatVente.FINALISEE) {\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;            throw new InvalidOperationException(\&quot;Impossible de supprimer une vente finalisée\&quot;);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        }\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        // Delete all line items first\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        ligneVenteRepository.deleteAllByVenteId(id);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        venteRepository.delete(vente);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    }\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    // --- Business Operations ---\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    @Transactional\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    @Override\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    public VenteDTO createVente(Long entrepriseId, VenteDTO venteDTO) {\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        venteDTO.setIdEntreprise(entrepriseId);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        return save(venteDTO);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    }\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    @Transactional\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    public VenteDTO updateEtatVente(Long idVente, EtatVente etatVente) {\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        Vente vente = venteRepository.findById(idVente)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .orElseThrow(() -&gt; new ResourceNotFoundException(\&quot;Vente\&quot;, \&quot;id\&quot;, idVente));\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        vente.setEtatVente(etatVente);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        Vente updated = venteRepository.save(vente);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        return modelMapper.map(updated, VenteDTO.class);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    }\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    @Transactional\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    @Override\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    public VenteDTO finalizeVente(Long idVente) {\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        Vente vente = venteRepository.findById(idVente)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .orElseThrow(() -&gt; new ResourceNotFoundException(\&quot;Vente\&quot;, \&quot;id\&quot;, idVente));\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        if (vente.getEtatVente() == EtatVente.FINALISEE) {\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;            throw new InvalidOperationException(\&quot;Vente déjà finalisée\&quot;);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        }\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        List&lt;LigneVente&gt; lignes = ligneVenteRepository.findAllByVenteId(idVente);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        if (lignes.isEmpty()) {\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;            throw new InvalidOperationException(\&quot;Impossible de finaliser une vente sans lignes\&quot;);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        }\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        vente.setEtatVente(EtatVente.FINALISEE);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        venteRepository.save(vente);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        // Update stock for each article\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        for (LigneVente ligne : lignes) {\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;            Article article = ligne.getArticle();\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;            if (article.getQuantiteEnStock() &lt; ligne.getQuantite().longValue()) {\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                throw new APIException(\&quot;Stock insuffisant pour l'article: \&quot; + article.getDesignation());\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;            }\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;            article.setQuantiteEnStock(article.getQuantiteEnStock() - ligne.getQuantite().longValue());\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;            articleRepository.save(article);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        }\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        return modelMapper.map(vente, VenteDTO.class);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    }\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    // --- Search and Filter Operations ---\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    @Override\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    public List&lt;VenteDTO&gt; findAllByEntreprise(Long entrepriseId) {\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        return venteRepository.findAllByEntrepriseId(entrepriseId).stream()\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .map(vente -&gt; modelMapper.map(vente, VenteDTO.class))\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .collect(Collectors.toList());\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    }\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    @Override\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    public List&lt;VenteDTO&gt; findByEtatVente(EtatVente etatVente) {\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        return venteRepository.findAllByEtatVente(etatVente).stream()\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .map(vente -&gt; modelMapper.map(vente, VenteDTO.class))\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .collect(Collectors.toList());\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    }\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    @Override\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    public List&lt;VenteDTO&gt; findByEntrepriseAndEtatVente(Long entrepriseId, EtatVente etatVente) {\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        return venteRepository.findAllByEntrepriseIdAndEtatVente(entrepriseId, etatVente).stream()\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .map(vente -&gt; modelMapper.map(vente, VenteDTO.class))\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .collect(Collectors.toList());\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    }\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    @Override\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    public List&lt;VenteDTO&gt; findByDateRange(LocalDateTime startDate, LocalDateTime endDate) {\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        return venteRepository.findAllByCreationDateBetween(startDate, endDate).stream()\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .map(vente -&gt; modelMapper.map(vente, VenteDTO.class))\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .collect(Collectors.toList());\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    }\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    @Override\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    public List&lt;VenteDTO&gt; findByEntrepriseAndDateRange(Long entrepriseId, LocalDateTime startDate,\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                                                       LocalDateTime endDate) {\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        return venteRepository.findAllByEntrepriseIdAndCreationDateBetween(entrepriseId, startDate, endDate).stream()\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .map(vente -&gt; modelMapper.map(vente, VenteDTO.class))\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .collect(Collectors.toList());\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    }\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    // --- Line Items Management ---\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    @Override\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    public List&lt;LigneVenteDTO&gt; findAllLignesVenteByVenteId(Long idVente) {\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        return ligneVenteRepository.findAllByVenteId(idVente).stream()\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .map(ligne -&gt; modelMapper.map(ligne, LigneVenteDTO.class))\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .collect(Collectors.toList());\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    }\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    @Transactional\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    @Override\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    public LigneVenteDTO addLigneVente(Long venteId, LigneVenteDTO ligneVenteDTO) {\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        // Récupérer la vente\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        Vente vente = venteRepository.findById(venteId)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .orElseThrow(() -&gt; new ResourceNotFoundException(\&quot;Vente\&quot;, \&quot;id\&quot;, venteId));\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        // Vérifier que la vente n'est pas finalisée\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        if (vente.getEtatVente() == EtatVente.FINALISEE) {\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;            throw new InvalidOperationException(\&quot;Impossible d'ajouter une ligne à une vente finalisée\&quot;);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        }\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        // Récupérer l'article\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        Article article = articleRepository.findById(ligneVenteDTO.getIdArticle())\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .orElseThrow(() -&gt; new ResourceNotFoundException(\&quot;Article\&quot;, \&quot;id\&quot;, ligneVenteDTO.getIdArticle()));\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        // Vérifier le stock\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        if (BigDecimal.valueOf(article.getQuantiteEnStock()).compareTo(ligneVenteDTO.getQuantite()) &lt; 0) {\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;            throw new APIException(\&quot;Stock insuffisant pour l'article: \&quot; + article.getDesignation());\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        }\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        // Mapper DTO vers entité\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        LigneVente ligne = modelMapper.map(ligneVenteDTO, LigneVente.class);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        ligne.setVente(vente);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        ligne.setArticle(article);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        // Enregistrer la ligne de vente\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        LigneVente saved = ligneVenteRepository.save(ligne);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        // Retourner le résultat en DTO\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        return modelMapper.map(saved, LigneVenteDTO.class);\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    }\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot; Create all controllers methods using swagger annotation in @src/main/java/com/belvinard/gestionstock/controller/VenteController.java&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;}\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:0,&quot;content&quot;:&quot;&lt;augment_code_snippet path=\&quot;src/main/java/com/belvinard/gestionstock/controller/VenteController.java\&quot; mode=\&quot;EDIT\&quot;&gt;\n```java\npackage com.belvinard.gestionstock.controller;\n\nimport com.belvinard.gestionstock.dto.LigneVenteDTO;\nimport com.belvinard.gestionstock.dto.VenteDTO;\nimport com.belvinard.gestionstock.enums.EtatVente;\nimport com.belvinard.gestionstock.service.VenteService;\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.format.annotation.DateTimeFormat;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.validation.Valid;\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\&quot;/api/ventes\&quot;)\n@RequiredArgsConstructor\n@Tag(name = \&quot;Vente\&quot;, description = \&quot;API de gestion des ventes\&quot;)\npublic class VenteController {\n\n    private final VenteService venteService;\n\n    @PostMapping\n    @Operation(summary = \&quot;Créer une nouvelle vente\&quot;)\n    public ResponseEntity&lt;VenteDTO&gt; save(@Valid @RequestBody VenteDTO venteDTO) {\n        return ResponseEntity.status(HttpStatus.CREATED).body(venteService.save(venteDTO));\n    }\n\n    @GetMapping(\&quot;/{id}\&quot;)\n    @Operation(summary = \&quot;Récupérer une vente par ID\&quot;)\n    public ResponseEntity&lt;VenteDTO&gt; findById(@PathVariable Long id) {\n        return ResponseEntity.ok(venteService.findById(id));\n    }\n\n    @GetMapping(\&quot;/code/{code}\&quot;)\n    @Operation(summary = \&quot;Récupérer une vente par code\&quot;)\n    public ResponseEntity&lt;VenteDTO&gt; findByCode(@PathVariable String code) {\n        return ResponseEntity.ok(venteService.findByCode(code));\n    }\n\n    @GetMapping\n    @Operation(summary = \&quot;Récupérer toutes les ventes\&quot;)\n    public ResponseEntity&lt;List&lt;VenteDTO&gt;&gt; findAll() {\n        return ResponseEntity.ok(venteService.findAll());\n    }\n\n    @DeleteMapping(\&quot;/{id}\&quot;)\n    @Operation(summary = \&quot;Supprimer une vente\&quot;)\n    public ResponseEntity&lt;Void&gt; delete(@PathVariable Long id) {\n        venteService.delete(id);\n        return ResponseEntity.noContent().build();\n    }\n\n    @PostMapping(\&quot;/entreprise/{entrepriseId}\&quot;)\n    @Operation(summary = \&quot;Créer une vente pour une entreprise\&quot;)\n    public ResponseEntity&lt;VenteDTO&gt; createVente(\n            @PathVariable Long entrepriseId,\n            @Valid @RequestBody VenteDTO venteDTO) {\n        return ResponseEntity.status(HttpStatus.CREATED)\n                .body(venteService.createVente(entrepriseId, venteDTO));\n    }\n\n    @PutMapping(\&quot;/{id}/finalize\&quot;)\n    @Operation(summary = \&quot;Finaliser une vente\&quot;)\n    public ResponseEntity&lt;VenteDTO&gt; finalizeVente(@PathVariable Long id) {\n        return ResponseEntity.ok(venteService.finalizeVente(id));\n    }\n\n    @GetMapping(\&quot;/entreprise/{entrepriseId}\&quot;)\n    @Operation(summary = \&quot;Récupérer les ventes par entreprise\&quot;)\n    public ResponseEntity&lt;List&lt;VenteDTO&gt;&gt; findByEntreprise(@PathVariable Long entrepriseId) {\n        return ResponseEntity.ok(venteService.findAllByEntreprise(entrepriseId));\n    }\n\n    @GetMapping(\&quot;/etat/{etatVente}\&quot;)\n    @Operation(summary = \&quot;Récupérer les ventes par état\&quot;)\n    public ResponseEntity&lt;List&lt;VenteDTO&gt;&gt; findByEtatVente(@PathVariable EtatVente etatVente) {\n        return ResponseEntity.ok(venteService.findByEtatVente(etatVente));\n    }\n\n    @GetMapping(\&quot;/entreprise/{entrepriseId}/etat/{etatVente}\&quot;)\n    @Operation(summary = \&quot;Récupérer les ventes par entreprise et état\&quot;)\n    public ResponseEntity&lt;List&lt;VenteDTO&gt;&gt; findByEntrepriseAndEtatVente(\n            @PathVariable Long entrepriseId,\n            @PathVariable EtatVente etatVente) {\n        return ResponseEntity.ok(venteService.findByEntrepriseAndEtatVente(entrepriseId, etatVente));\n    }\n\n    @GetMapping(\&quot;/date-range\&quot;)\n    @Operation(summary = \&quot;Récupérer les ventes par période\&quot;)\n    public ResponseEntity&lt;List&lt;VenteDTO&gt;&gt; findByDateRange(\n            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime startDate,\n            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime endDate) {\n        return ResponseEntity.ok(venteService.findByDateRange(startDate, endDate));\n    }\n\n    @GetMapping(\&quot;/entreprise/{entrepriseId}/date-range\&quot;)\n    @Operation(summary = \&quot;Récupérer les ventes par entreprise et période\&quot;)\n    public ResponseEntity&lt;List&lt;VenteDTO&gt;&gt; findByEntrepriseAndDateRange(\n            @PathVariable Long entrepriseId,\n            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime startDate,\n            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime endDate) {\n        return ResponseEntity.ok(venteService.findByEntrepriseAndDateRange(entrepriseId, startDate, endDate));\n    }\n\n    @GetMapping(\&quot;/{venteId}/lignes\&quot;)\n    @Operation(summary = \&quot;Récupérer les lignes de vente\&quot;)\n    public ResponseEntity&lt;List&lt;LigneVenteDTO&gt;&gt; findLignesVente(@PathVariable Long venteId) {\n        return ResponseEntity.ok(venteService.findAllLignesVenteByVenteId(venteId));\n    }\n\n    @PostMapping(\&quot;/{venteId}/lignes\&quot;)\n    @Operation(summary = \&quot;Ajouter une ligne de vente\&quot;)\n    public ResponseEntity&lt;LigneVenteDTO&gt; addLigneVente(\n            @PathVariable Long venteId,\n            @Valid @RequestBody LigneVenteDTO ligneVenteDTO) {\n        return ResponseEntity.status(HttpStatus.CREATED)\n                .body(venteService.addLigneVente(venteId, ligneVenteDTO));\n    }\n}\n```\n&lt;/augment_code_snippet&gt;\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;here's @src/main/java/com/belvinard/gestionstock/service/impl/VenteServiceImpl.java\n@Service\r\n@RequiredArgsConstructor\r\npublic class VenteServiceImpl implements VenteService {\r\n\r\n    private final VenteRepository venteRepository;\r\n    private final LigneVenteRepository ligneVenteRepository;\r\n    private final ArticleRepository articleRepository;\r\n    private final EntrepriseRepository entrepriseRepository;\r\n    private final ModelMapper modelMapper;\r\n\r\n    @Override\r\n    @Transactional\r\n    public VenteDTO save(VenteDTO dto) {\r\n        // Validate entreprise\r\n        Entreprise entreprise = entrepriseRepository.findById(dto.getIdEntreprise())\r\n                .orElseThrow(() -&gt; new ResourceNotFoundException(\&quot;Entreprise\&quot;, \&quot;id\&quot;, dto.getIdEntreprise()));\r\n\r\n        // Create Vente entity\r\n        Vente vente = modelMapper.map(dto, Vente.class);\r\n        vente.setEntreprise(entreprise);\r\n        vente.setEtatVente(EtatVente.EN_COURS);\r\n        Vente saved = venteRepository.save(vente);\r\n        return modelMapper.map(saved, VenteDTO.class);\r\n    }\r\n\r\n    @Override\r\n    public VenteDTO findById(Long id) {\r\n        Vente vente = venteRepository.findById(id)\r\n                .orElseThrow(() -&gt; new ResourceNotFoundException(\&quot;Vente\&quot;, \&quot;id\&quot;, id));\r\n        return modelMapper.map(vente, VenteDTO.class);\r\n    }\r\n\r\n    @Override\r\n    public VenteDTO findByCode(String code) {\r\n        Vente vente = venteRepository.findByCode(code)\r\n                .orElseThrow(() -&gt; new ResourceNotFoundException(\&quot;Vente\&quot;, \&quot;code\&quot;, code));\r\n        return modelMapper.map(vente, VenteDTO.class);\r\n    }\r\n\r\n    @Override\r\n    public List&lt;VenteDTO&gt; findAll() {\r\n        return venteRepository.findAll().stream()\r\n                .map(vente -&gt; modelMapper.map(vente, VenteDTO.class))\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public void delete(Long id) {\r\n        Vente vente = venteRepository.findById(id)\r\n                .orElseThrow(() -&gt; new ResourceNotFoundException(\&quot;Vente\&quot;, \&quot;id\&quot;, id));\r\n        if (vente.getEtatVente() == EtatVente.FINALISEE) {\r\n            throw new InvalidOperationException(\&quot;Impossible de supprimer une vente finalisée\&quot;);\r\n        }\r\n        // Delete all line items first\r\n        ligneVenteRepository.deleteAllByVenteId(id);\r\n        venteRepository.delete(vente);\r\n    }\r\n\r\n    // --- Business Operations ---\r\n\r\n    @Transactional\r\n    @Override\r\n    public VenteDTO createVente(Long entrepriseId, VenteDTO venteDTO) {\r\n        venteDTO.setIdEntreprise(entrepriseId);\r\n        return save(venteDTO);\r\n    }\r\n\r\n\r\n    @Transactional\r\n    public VenteDTO updateEtatVente(Long idVente, EtatVente etatVente) {\r\n        Vente vente = venteRepository.findById(idVente)\r\n                .orElseThrow(() -&gt; new ResourceNotFoundException(\&quot;Vente\&quot;, \&quot;id\&quot;, idVente));\r\n        vente.setEtatVente(etatVente);\r\n        Vente updated = venteRepository.save(vente);\r\n        return modelMapper.map(updated, VenteDTO.class);\r\n    }\r\n\r\n    @Transactional\r\n    @Override\r\n    public VenteDTO finalizeVente(Long idVente) {\r\n        Vente vente = venteRepository.findById(idVente)\r\n                .orElseThrow(() -&gt; new ResourceNotFoundException(\&quot;Vente\&quot;, \&quot;id\&quot;, idVente));\r\n        if (vente.getEtatVente() == EtatVente.FINALISEE) {\r\n            throw new InvalidOperationException(\&quot;Vente déjà finalisée\&quot;);\r\n        }\r\n        List&lt;LigneVente&gt; lignes = ligneVenteRepository.findAllByVenteId(idVente);\r\n        if (lignes.isEmpty()) {\r\n            throw new InvalidOperationException(\&quot;Impossible de finaliser une vente sans lignes\&quot;);\r\n        }\r\n        vente.setEtatVente(EtatVente.FINALISEE);\r\n        venteRepository.save(vente);\r\n        // Update stock for each article\r\n        for (LigneVente ligne : lignes) {\r\n            Article article = ligne.getArticle();\r\n            if (article.getQuantiteEnStock() &lt; ligne.getQuantite().longValue()) {\r\n                throw new APIException(\&quot;Stock insuffisant pour l'article: \&quot; + article.getDesignation());\r\n            }\r\n            article.setQuantiteEnStock(article.getQuantiteEnStock() - ligne.getQuantite().longValue());\r\n            articleRepository.save(article);\r\n        }\r\n        return modelMapper.map(vente, VenteDTO.class);\r\n    }\r\n\r\n    // --- Search and Filter Operations ---\r\n\r\n    @Override\r\n    public List&lt;VenteDTO&gt; findAllByEntreprise(Long entrepriseId) {\r\n        return venteRepository.findAllByEntrepriseId(entrepriseId).stream()\r\n                .map(vente -&gt; modelMapper.map(vente, VenteDTO.class))\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    public List&lt;VenteDTO&gt; findByEtatVente(EtatVente etatVente) {\r\n        return venteRepository.findAllByEtatVente(etatVente).stream()\r\n                .map(vente -&gt; modelMapper.map(vente, VenteDTO.class))\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    public List&lt;VenteDTO&gt; findByEntrepriseAndEtatVente(Long entrepriseId, EtatVente etatVente) {\r\n        return venteRepository.findAllByEntrepriseIdAndEtatVente(entrepriseId, etatVente).stream()\r\n                .map(vente -&gt; modelMapper.map(vente, VenteDTO.class))\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    public List&lt;VenteDTO&gt; findByDateRange(LocalDateTime startDate, LocalDateTime endDate) {\r\n        return venteRepository.findAllByCreationDateBetween(startDate, endDate).stream()\r\n                .map(vente -&gt; modelMapper.map(vente, VenteDTO.class))\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    public List&lt;VenteDTO&gt; findByEntrepriseAndDateRange(Long entrepriseId, LocalDateTime startDate,\r\n                                                       LocalDateTime endDate) {\r\n        return venteRepository.findAllByEntrepriseIdAndCreationDateBetween(entrepriseId, startDate, endDate).stream()\r\n                .map(vente -&gt; modelMapper.map(vente, VenteDTO.class))\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    // --- Line Items Management ---\r\n\r\n    @Override\r\n    public List&lt;LigneVenteDTO&gt; findAllLignesVenteByVenteId(Long idVente) {\r\n        return ligneVenteRepository.findAllByVenteId(idVente).stream()\r\n                .map(ligne -&gt; modelMapper.map(ligne, LigneVenteDTO.class))\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Transactional\r\n    @Override\r\n    public LigneVenteDTO addLigneVente(Long venteId, LigneVenteDTO ligneVenteDTO) {\r\n        // Récupérer la vente\r\n        Vente vente = venteRepository.findById(venteId)\r\n                .orElseThrow(() -&gt; new ResourceNotFoundException(\&quot;Vente\&quot;, \&quot;id\&quot;, venteId));\r\n\r\n        // Vérifier que la vente n'est pas finalisée\r\n        if (vente.getEtatVente() == EtatVente.FINALISEE) {\r\n            throw new InvalidOperationException(\&quot;Impossible d'ajouter une ligne à une vente finalisée\&quot;);\r\n        }\r\n\r\n        // Récupérer l'article\r\n        Article article = articleRepository.findById(ligneVenteDTO.getIdArticle())\r\n                .orElseThrow(() -&gt; new ResourceNotFoundException(\&quot;Article\&quot;, \&quot;id\&quot;, ligneVenteDTO.getIdArticle()));\r\n\r\n        // Vérifier le stock\r\n        if (BigDecimal.valueOf(article.getQuantiteEnStock()).compareTo(ligneVenteDTO.getQuantite()) &lt; 0) {\r\n            throw new APIException(\&quot;Stock insuffisant pour l'article: \&quot; + article.getDesignation());\r\n        }\r\n\r\n        // Mapper DTO vers entité\r\n        LigneVente ligne = modelMapper.map(ligneVenteDTO, LigneVente.class);\r\n        ligne.setVente(vente);\r\n        ligne.setArticle(article);\r\n\r\n        // Enregistrer la ligne de vente\r\n        LigneVente saved = ligneVenteRepository.save(ligne);\r\n\r\n        // Retourner le résultat en DTO\r\n        return modelMapper.map(saved, LigneVenteDTO.class);\r\n    }\r\n Create all controllers methods using swagger annotation in @src/main/java/com/belvinard/gestionstock/controller/VenteController.java\n\r\n\r\n}\r\n&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;D:/project48/gestionstock&quot;,&quot;folderRoot&quot;:&quot;D:/project48/gestionstock&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-07-29T11:39:36.432Z&quot;,&quot;response_text&quot;:&quot;````java path=src/main/java/com/belvinard/gestionstock/controller/VenteController.java mode=EDIT\npackage com.belvinard.gestionstock.controller;\n\nimport com.belvinard.gestionstock.dto.LigneVenteDTO;\nimport com.belvinard.gestionstock.dto.VenteDTO;\nimport com.belvinard.gestionstock.enums.EtatVente;\nimport com.belvinard.gestionstock.service.VenteService;\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.format.annotation.DateTimeFormat;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.validation.Valid;\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\&quot;/api/ventes\&quot;)\n@RequiredArgsConstructor\n@Tag(name = \&quot;Vente\&quot;, description = \&quot;API de gestion des ventes\&quot;)\npublic class VenteController {\n\n    private final VenteService venteService;\n\n    @PostMapping\n    @Operation(summary = \&quot;Créer une nouvelle vente\&quot;)\n    public ResponseEntity&lt;VenteDTO&gt; save(@Valid @RequestBody VenteDTO venteDTO) {\n        return ResponseEntity.status(HttpStatus.CREATED).body(venteService.save(venteDTO));\n    }\n\n    @GetMapping(\&quot;/{id}\&quot;)\n    @Operation(summary = \&quot;Récupérer une vente par ID\&quot;)\n    public ResponseEntity&lt;VenteDTO&gt; findById(@PathVariable Long id) {\n        return ResponseEntity.ok(venteService.findById(id));\n    }\n\n    @GetMapping(\&quot;/code/{code}\&quot;)\n    @Operation(summary = \&quot;Récupérer une vente par code\&quot;)\n    public ResponseEntity&lt;VenteDTO&gt; findByCode(@PathVariable String code) {\n        return ResponseEntity.ok(venteService.findByCode(code));\n    }\n\n    @GetMapping\n    @Operation(summary = \&quot;Récupérer toutes les ventes\&quot;)\n    public ResponseEntity&lt;List&lt;VenteDTO&gt;&gt; findAll() {\n        return ResponseEntity.ok(venteService.findAll());\n    }\n\n    @DeleteMapping(\&quot;/{id}\&quot;)\n    @Operation(summary = \&quot;Supprimer une vente\&quot;)\n    public ResponseEntity&lt;Void&gt; delete(@PathVariable Long id) {\n        venteService.delete(id);\n        return ResponseEntity.noContent().build();\n    }\n\n    @PostMapping(\&quot;/entreprise/{entrepriseId}\&quot;)\n    @Operation(summary = \&quot;Créer une vente pour une entreprise\&quot;)\n    public ResponseEntity&lt;VenteDTO&gt; createVente(\n            @PathVariable Long entrepriseId,\n            @Valid @RequestBody VenteDTO venteDTO) {\n        return ResponseEntity.status(HttpStatus.CREATED)\n                .body(venteService.createVente(entrepriseId, venteDTO));\n    }\n\n    @PutMapping(\&quot;/{id}/finalize\&quot;)\n    @Operation(summary = \&quot;Finaliser une vente\&quot;)\n    public ResponseEntity&lt;VenteDTO&gt; finalizeVente(@PathVariable Long id) {\n        return ResponseEntity.ok(venteService.finalizeVente(id));\n    }\n\n    @GetMapping(\&quot;/entreprise/{entrepriseId}\&quot;)\n    @Operation(summary = \&quot;Récupérer les ventes par entreprise\&quot;)\n    public ResponseEntity&lt;List&lt;VenteDTO&gt;&gt; findByEntreprise(@PathVariable Long entrepriseId) {\n        return ResponseEntity.ok(venteService.findAllByEntreprise(entrepriseId));\n    }\n\n    @GetMapping(\&quot;/etat/{etatVente}\&quot;)\n    @Operation(summary = \&quot;Récupérer les ventes par état\&quot;)\n    public ResponseEntity&lt;List&lt;VenteDTO&gt;&gt; findByEtatVente(@PathVariable EtatVente etatVente) {\n        return ResponseEntity.ok(venteService.findByEtatVente(etatVente));\n    }\n\n    @GetMapping(\&quot;/entreprise/{entrepriseId}/etat/{etatVente}\&quot;)\n    @Operation(summary = \&quot;Récupérer les ventes par entreprise et état\&quot;)\n    public ResponseEntity&lt;List&lt;VenteDTO&gt;&gt; findByEntrepriseAndEtatVente(\n            @PathVariable Long entrepriseId,\n            @PathVariable EtatVente etatVente) {\n        return ResponseEntity.ok(venteService.findByEntrepriseAndEtatVente(entrepriseId, etatVente));\n    }\n\n    @GetMapping(\&quot;/date-range\&quot;)\n    @Operation(summary = \&quot;Récupérer les ventes par période\&quot;)\n    public ResponseEntity&lt;List&lt;VenteDTO&gt;&gt; findByDateRange(\n            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime startDate,\n            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime endDate) {\n        return ResponseEntity.ok(venteService.findByDateRange(startDate, endDate));\n    }\n\n    @GetMapping(\&quot;/entreprise/{entrepriseId}/date-range\&quot;)\n    @Operation(summary = \&quot;Récupérer les ventes par entreprise et période\&quot;)\n    public ResponseEntity&lt;List&lt;VenteDTO&gt;&gt; findByEntrepriseAndDateRange(\n            @PathVariable Long entrepriseId,\n            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime startDate,\n            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime endDate) {\n        return ResponseEntity.ok(venteService.findByEntrepriseAndDateRange(entrepriseId, startDate, endDate));\n    }\n\n    @GetMapping(\&quot;/{venteId}/lignes\&quot;)\n    @Operation(summary = \&quot;Récupérer les lignes de vente\&quot;)\n    public ResponseEntity&lt;List&lt;LigneVenteDTO&gt;&gt; findLignesVente(@PathVariable Long venteId) {\n        return ResponseEntity.ok(venteService.findAllLignesVenteByVenteId(venteId));\n    }\n\n    @PostMapping(\&quot;/{venteId}/lignes\&quot;)\n    @Operation(summary = \&quot;Ajouter une ligne de vente\&quot;)\n    public ResponseEntity&lt;LigneVenteDTO&gt; addLigneVente(\n            @PathVariable Long venteId,\n            @Valid @RequestBody LigneVenteDTO ligneVenteDTO) {\n        return ResponseEntity.status(HttpStatus.CREATED)\n                .body(venteService.addLigneVente(venteId, ligneVenteDTO));\n    }\n}\n````\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;e468fdc6-de06-411a-ab40-497acd365d0d&quot;,&quot;request_message&quot;:&quot;Update all my endpoints in order to all controllers classes displye like Vente-Controller&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Update all my endpoints in order to all controllers classes displye like Vente-Controller&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:0,&quot;content&quot;:&quot;&lt;augment_code_snippet path=\&quot;src/main/java/com/belvinard/gestionstock/controller/VenteController.java\&quot; mode=\&quot;EDIT\&quot;&gt;\n```java\n@Tag(name = \&quot;Vente-Controller\&quot;, description = \&quot;API de gestion des ventes\&quot;)\n```\n&lt;/augment_code_snippet&gt;\n\nTo update all your other controller classes to display as \&quot;ClassName-Controller\&quot; format, you'll need to modify the `@Tag` annotation in each controller. For example:\n\n- `ArticleController` → `@Tag(name = \&quot;Article-Controller\&quot;, ...)`\n- `ClientController` → `@Tag(name = \&quot;Client-Controller\&quot;, ...)`\n- `FournisseurController` → `@Tag(name = \&quot;Fournisseur-Controller\&quot;, ...)`\n- `EntrepriseController` → `@Tag(name = \&quot;Entreprise-Controller\&quot;, ...)`\n\nCould you share the other controller files using the \&quot;@\&quot; syntax so I can update them all consistently?\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;Update all my endpoints in order to all controllers classes displye like Vente-Controller&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;D:/my_springBoot/Inventory-Management&quot;,&quot;folderRoot&quot;:&quot;D:/my_springBoot/Inventory-Management&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-07-29T12:12:06.099Z&quot;,&quot;response_text&quot;:&quot;````java path=src/main/java/com/belvinard/gestionstock/controller/VenteController.java mode=EDIT\n@Tag(name = \&quot;Vente-Controller\&quot;, description = \&quot;API de gestion des ventes\&quot;)\n````\n\nTo update all your other controller classes to display as \&quot;ClassName-Controller\&quot; format, you'll need to modify the `@Tag` annotation in each controller. For example:\n\n- `ArticleController` → `@Tag(name = \&quot;Article-Controller\&quot;, ...)`\n- `ClientController` → `@Tag(name = \&quot;Client-Controller\&quot;, ...)`\n- `FournisseurController` → `@Tag(name = \&quot;Fournisseur-Controller\&quot;, ...)`\n- `EntrepriseController` → `@Tag(name = \&quot;Entreprise-Controller\&quot;, ...)`\n\nCould you share the other controller files using the \&quot;@\&quot; syntax so I can update them all consistently?\n&quot;,&quot;workspace_file_chunks&quot;:[]}],&quot;feedbackStates&quot;:{&quot;temp-fe-04d203cb-0600-4d1e-927f-2f0353aa3971&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-7fb4ef0c-faa8-4e5b-946b-eaaa6ddbf38c&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-dd91b33c-4118-4e75-9a7a-258791b00448&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-85766756-a775-49ec-b3cb-2fdaadecfd6f&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;}},&quot;toolUseStates&quot;:{},&quot;draftExchange&quot;:{&quot;request_message&quot;:&quot;&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;}]},&quot;status&quot;:&quot;draft&quot;},&quot;requestIds&quot;:[],&quot;isPinned&quot;:false,&quot;isShareable&quot;:true,&quot;extraData&quot;:{&quot;hasDirtyEdits&quot;:false},&quot;personaType&quot;:0,&quot;rootTaskUuid&quot;:&quot;3f7fccb0-379a-4ca5-9b06-243afa4b35f9&quot;}},&quot;agentExecutionMode&quot;:&quot;manual&quot;,&quot;isPanelCollapsed&quot;:true,&quot;displayedAnnouncements&quot;:[]}" />
      </map>
    </option>
  </component>
</project>